from typing import Callable
import matplotlib.pyplot as plt
import numpy as np
import math

def poisson_random_variable(lambda_param) -> int:
    """
    Generate a Poisson random variable with parameter lambda_param.
    """
    L = math.exp(-lambda_param)
    k = 0
    p = 1
    while p > L:
        k = k + 1
        u = np.random.uniform(0, 1)
        p = p * u
    return k - 1


def visualize_random_variable(random_variable_generator:Callable, ground_truth_generator:Callable=None, num_samples:int=10000):
    """
    Visualize a random variable generated by the given random_variable_generator function and optionally compare it
    with the ground truth generated by the ground_truth_generator function.
    
    Parameters:
        random_variable_generator (function): Function to generate random variables.
        ground_truth_generator (function): Optional. Function to generate ground truth random variables for comparison.
        num_samples (int): Number of samples to generate for visualization (default is 1000).
    """
    # Generate random variables
    random_values = [random_variable_generator() for _ in range(num_samples)]
    print(random_values)
    
    # Plot histogram for random variable generator
    plt.hist(random_values, bins=20, density=True, alpha=0.6, color='g', label='Generated')
    
    if ground_truth_generator:
        # Generate ground truth random variables
        gt_values = [ground_truth_generator() for _ in range(num_samples)]
        
        # Plot histogram for ground truth generator
        plt.hist(gt_values, bins=20, density=True, alpha=0.6, color='b', label='Ground Truth')
        
        plt.legend()
    
    plt.title('Random Variable Visualization')
    plt.xlabel('Value')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()

# create a function that shows in a time line the arrivals of clients
def visualize_time_arrivals(arrival_time_generator:Callable, num_samples:int=10000):
    """
    Visualize the time arrivals of clients generated by the given arrival_time_generator function.
    
    Parameters:
        arrival_time_generator (function): Function to generate arrival times of clients.
        num_samples (int): Number of samples to generate for visualization (default is 1000).
    """
    # Generate arrival times
    arrival_delays = [arrival_time_generator() for _ in range(num_samples)]
    t = 0
    arrival_times = []
    for delay in arrival_delays:
        t += delay
        arrival_times.append(t)

    time_count:dict[int, int] = dict()
    for time in arrival_times:
        count = time_count.setdefault(time,0)
        time_count[time] = count + 1

    ss = sorted(time_count.items())
    X = []
    Y = []
    for x,y in ss:
        X.append(x)
        Y.append(y)
    
    # print(ss)
    plt.plot(X,Y)
    # plt.hist(arrival_times, bins=20, alpha=0.6, color='g')
    plt.title('Time Arrivals of Clients')
    plt.xlabel('Time')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()


if __name__ == "__main__":
    # visualize_random_variable(lambda: poisson_random_variable(5), lambda: np.random.poisson(5))
    # visualize_time_arrivals(lambda: poisson_random_variable(5))
    visualize_time_arrivals(lambda: poisson_random_variable(5), num_samples=10*12*60)
    
    # data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]
    # plt.hist(data, bins=5)
    # plt.show()